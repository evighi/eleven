datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum TipoUsuario {
  CLIENTE
  ADMIN_MASTER
  ADMIN_ATENDENTE
  ADMIN_PROFESSORES
}

enum StatusAgendamento {
  CONFIRMADO
  CANCELADO
  FINALIZADO
  TRANSFERIDO
}

enum TipoCamera {
  COM_CAMERA
  SEM_CAMERA
}

enum DiaSemana {
  DOMINGO
  SEGUNDA
  TERCA
  QUARTA
  QUINTA
  SEXTA
  SABADO
}

enum Turno {
  DIA
  NOITE
}

enum DeletionStatus {
  PENDING // aguardando janela de 90 dias
  DONE // exclus√£o conclu√≠da
  CANCELLED // cancelado pelo admin
}

enum InteractionType {
  AG_COMUM
  AG_PERM
  CHURRAS
  NONE // caso n√£o haja intera√ß√£o conhecida
}

model Usuario {
  id                String      @id @default(uuid())
  nome              String
  email             String      @unique
  celular           String?
  senha             String
  cpf               String?
  nascimento        DateTime?
  tipo              TipoUsuario
  verificado        Boolean     @default(false)
  codigoEmail       String?
  codigoRecuperacao String?
  expiraEm          DateTime?

  // üí∞ novo campo (opcional)
  valorQuadra Decimal? @db.Decimal(10, 2)

  agendamentos                        Agendamento[]                        @relation("AgendamentoFeitoPor")
  agendamentosPermanentes             AgendamentoPermanente[]
  participaDeAgendamentos             Agendamento[]                        @relation("JogadoresNoAgendamento")
  agendamentosChurrasqueira           AgendamentoChurrasqueira[]           @relation("UsuarioAgendamentoChurrasqueira")
  agendamentosPermanenteChurrasqueira AgendamentoPermanenteChurrasqueira[] @relation("UsuarioAgendamentoPermanenteChurrasqueira")

  agendamentosCancelados                          Agendamento[]                        @relation("AgendamentoCanceladoPor")
  permanentesCancelamentosCriados                 AgendamentoPermanenteCancelamento[]  @relation("UsuarioCriouCancelamentoPermanente")
  agendamentosTransferidos                        Agendamento[]                        @relation("AgendamentoTransferidoPor")
  agendamentosPermanentesCancelados               AgendamentoPermanente[]              @relation("AgendamentoPermanenteCanceladoPor")
  agendamentosPermanentesTransferidos             AgendamentoPermanente[]              @relation("AgendamentoPermanenteTransferidoPor")
  agendamentosChurrasqueiraCancelados             AgendamentoChurrasqueira[]           @relation("AgendamentoChurrasqueiraCanceladoPor")
  agendamentosChurrasqueiraTransferidos           AgendamentoChurrasqueira[]           @relation("AgendamentoChurrasqueiraTransferidoPor")
  agendamentosPermanenteChurrasqueiraCancelados   AgendamentoPermanenteChurrasqueira[] @relation("AgendamentoPermanenteChurrasqueiraCanceladoPor")
  agendamentosPermanenteChurrasqueiraTransferidos AgendamentoPermanenteChurrasqueira[] @relation("AgendamentoPermanenteChurrasqueiraTransferidoPor")

  permanentesChurrasqueiraCancelamentosCriados AgendamentoPermanenteChurrasqueiraCancelamento[] @relation("UsuarioCriouCancelamentoPermanenteChurrasqueira")

  bloqueiosFeitos BloqueioQuadra[] @relation("UsuarioBloqueios")

  auditLogs AuditLog[] @relation("UsuarioAuditLogs")

  // üîí controle de acesso e marca√ß√µes de exclus√£o
  disabledAt  DateTime? // bloqueia login enquanto pendente
  deletedAt   DateTime? // marca remo√ß√£o l√≥gica (se usar soft delete)
  deletedById String? // quem concluiu a exclus√£o (mantido sem FK)

  // rela√ß√µes com a fila de exclus√£o
  deletionQueue      UserDeletionQueue?  @relation("DeletionTargetUser")
  deletionsRequested UserDeletionQueue[] @relation("DeletionRequestedBy")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([disabledAt])
  @@index([deletedAt])
}

model Esporte {
  id     String  @id @default(uuid())
  nome   String  @unique
  imagem String?

  quadraEsportes          QuadraEsporte[]
  agendamentos            Agendamento[]
  agendamentosPermanentes AgendamentoPermanente[]
}

model Quadra {
  id         String     @id @default(uuid())
  nome       String
  numero     Int
  tipoCamera TipoCamera
  imagem     String?

  quadraEsportes          QuadraEsporte[]
  agendamentos            Agendamento[]
  agendamentosPermanentes AgendamentoPermanente[]

  bloqueios BloqueioQuadra[] @relation("QuadrasNoBloqueio")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model QuadraEsporte {
  quadraId  String
  esporteId String

  quadra  Quadra  @relation(fields: [quadraId], references: [id])
  esporte Esporte @relation(fields: [esporteId], references: [id])

  @@id([quadraId, esporteId])
}

model Churrasqueira {
  id         String  @id @default(uuid())
  nome       String
  numero     Int
  imagem     String?
  observacao String?

  agendamentos            AgendamentoChurrasqueira[]
  agendamentosPermanentes AgendamentoPermanenteChurrasqueira[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Agendamento {
  id      String   @id @default(uuid())
  data    DateTime
  horario String

  usuario   Usuario @relation("AgendamentoFeitoPor", fields: [usuarioId], references: [id])
  usuarioId String

  quadra   Quadra @relation(fields: [quadraId], references: [id])
  quadraId String

  esporte   Esporte @relation(fields: [esporteId], references: [id])
  esporteId String

  jogadores Usuario[] @relation("JogadoresNoAgendamento")

  obs String?

  status StatusAgendamento @default(CONFIRMADO)

  canceladoPor   Usuario? @relation("AgendamentoCanceladoPor", fields: [canceladoPorId], references: [id])
  canceladoPorId String?

  transferidoPor   Usuario? @relation("AgendamentoTransferidoPor", fields: [transferidoPorId], references: [id])
  transferidoPorId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AgendamentoPermanente {
  id        String    @id @default(uuid())
  diaSemana DiaSemana
  horario   String

  quadra   Quadra @relation(fields: [quadraId], references: [id])
  quadraId String

  usuario   Usuario @relation(fields: [usuarioId], references: [id])
  usuarioId String

  esporte   Esporte @relation(fields: [esporteId], references: [id])
  esporteId String

  dataInicio DateTime?

  status StatusAgendamento @default(CONFIRMADO)

  canceladoPor   Usuario? @relation("AgendamentoPermanenteCanceladoPor", fields: [canceladoPorId], references: [id])
  canceladoPorId String?

  transferidoPor   Usuario? @relation("AgendamentoPermanenteTransferidoPor", fields: [transferidoPorId], references: [id])
  transferidoPorId String?

  // exce√ß√µes por data (cancelar s√≥ um dia) ‚Äî QUADRA
  cancelamentos AgendamentoPermanenteCancelamento[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AgendamentoChurrasqueira {
  id String @id @default(uuid())

  // comum por data (mant√©m Turno)
  data  DateTime
  turno Turno

  churrasqueira   Churrasqueira @relation(fields: [churrasqueiraId], references: [id])
  churrasqueiraId String

  usuario   Usuario @relation("UsuarioAgendamentoChurrasqueira", fields: [usuarioId], references: [id])
  usuarioId String

  status StatusAgendamento @default(CONFIRMADO)

  canceladoPor   Usuario? @relation("AgendamentoChurrasqueiraCanceladoPor", fields: [canceladoPorId], references: [id])
  canceladoPorId String?

  transferidoPor   Usuario? @relation("AgendamentoChurrasqueiraTransferidoPor", fields: [transferidoPorId], references: [id])
  transferidoPorId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([usuarioId])
  @@index([churrasqueiraId, data])
}

model AgendamentoPermanenteChurrasqueira {
  id         String    @id @default(uuid())
  diaSemana  DiaSemana
  turno      Turno
  dataInicio DateTime?

  churrasqueira   Churrasqueira @relation(fields: [churrasqueiraId], references: [id])
  churrasqueiraId String

  usuario   Usuario @relation("UsuarioAgendamentoPermanenteChurrasqueira", fields: [usuarioId], references: [id])
  usuarioId String

  status StatusAgendamento @default(CONFIRMADO)

  canceladoPor   Usuario? @relation("AgendamentoPermanenteChurrasqueiraCanceladoPor", fields: [canceladoPorId], references: [id])
  canceladoPorId String?

  transferidoPor   Usuario? @relation("AgendamentoPermanenteChurrasqueiraTransferidoPor", fields: [transferidoPorId], references: [id])
  transferidoPorId String?

  // NOVO: exce√ß√µes por data (um dia cancelado na recorr√™ncia) ‚Äî CHURRASQUEIRA
  cancelamentos AgendamentoPermanenteChurrasqueiraCancelamento[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // evita duplicatas
  @@unique([churrasqueiraId, diaSemana, turno], map: "uniq_perm_churra_slot")
}

// Nova model para bloquear quadras por dia e hor√°rio
model BloqueioQuadra {
  id           String   @id @default(uuid())
  dataBloqueio DateTime

  inicioBloqueio String // ex: "09:00"
  fimBloqueio    String // ex: "22:00"

  quadras Quadra[] @relation("QuadrasNoBloqueio")

  bloqueadoPor   Usuario @relation("UsuarioBloqueios", fields: [bloqueadoPorId], references: [id])
  bloqueadoPorId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Exce√ß√£o (um dia) ‚Äî QUADRA
model AgendamentoPermanenteCancelamento {
  id                      String   @id @default(uuid())
  agendamentoPermanenteId String
  data                    DateTime
  motivo                  String?
  criadoPorId             String?
  createdAt               DateTime @default(now())

  permanente AgendamentoPermanente @relation(fields: [agendamentoPermanenteId], references: [id], onDelete: Cascade)
  criadoPor  Usuario?              @relation("UsuarioCriouCancelamentoPermanente", fields: [criadoPorId], references: [id])

  @@unique([agendamentoPermanenteId, data])
  @@index([agendamentoPermanenteId, data])
}

// NOVO: Exce√ß√£o (um dia) ‚Äî CHURRASQUEIRA
model AgendamentoPermanenteChurrasqueiraCancelamento {
  id                                   String   @id @default(uuid())
  agendamentoPermanenteChurrasqueiraId String
  data                                 DateTime
  motivo                               String?
  criadoPorId                          String?
  createdAt                            DateTime @default(now())

  permanente AgendamentoPermanenteChurrasqueira @relation(fields: [agendamentoPermanenteChurrasqueiraId], references: [id], onDelete: Cascade)
  criadoPor  Usuario?                           @relation("UsuarioCriouCancelamentoPermanenteChurrasqueira", fields: [criadoPorId], references: [id])

  @@unique([agendamentoPermanenteChurrasqueiraId, data])
  @@index([agendamentoPermanenteChurrasqueiraId, data])
}

// =====================
// AUDITORIA
// =====================

enum AuditTargetType {
  USUARIO
  AGENDAMENTO
  AGENDAMENTO_PERMANENTE
  AGENDAMENTO_CHURRASQUEIRA
  AGENDAMENTO_PERMANENTE_CHURRASQUEIRA
  QUADRA
  CHURRASQUEIRA
  SISTEMA
}

model AuditLog {
  id String @id @default(uuid())

  // Quem fez (pode ser null em a√ß√µes an√¥nimas)
  actorId   String?
  actor     Usuario?     @relation("UsuarioAuditLogs", fields: [actorId], references: [id])
  actorName String? // snapshot do nome no momento do evento
  actorTipo TipoUsuario? // snapshot do tipo no momento do evento

  // O que aconteceu
  event String // ex.: "LOGIN_SUCESSO", "AGENDAMENTO_CREATE", etc.

  // Contra quem/qual recurso
  targetType AuditTargetType
  targetId   String? // id do recurso; pode ser null em eventos gerais

  // Contexto
  ip        String?
  userAgent String?
  metadata  Json?

  createdAt DateTime @default(now())

  @@index([event])
  @@index([actorId])
  @@index([targetType, targetId])
  @@index([createdAt])
}

model UserDeletionQueue {
  id String @id @default(uuid())

  // Usu√°rio alvo (1:1)
  usuarioId String  @unique
  usuario   Usuario @relation("DeletionTargetUser", fields: [usuarioId], references: [id])

  // Quem solicitou (opcional) ‚Äî segunda rela√ß√£o com Usuario
  requestedById String?
  requestedBy   Usuario? @relation("DeletionRequestedBy", fields: [requestedById], references: [id])

  status DeletionStatus @default(PENDING)

  // √öltima intera√ß√£o para exibir no front
  lastInteractionType InteractionType @default(NONE)
  lastInteractionId   String?
  lastInteractionDate DateTime?

  // Data a partir da qual pode excluir (ex.: lastInteractionDate + 90d)
  eligibleAt DateTime?

  // Auditoria da fila
  requestedAt DateTime  @default(now())
  processedAt DateTime?
  cancelledAt DateTime?
  attempts    Int       @default(0)
  reason      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status, eligibleAt])
  @@index([requestedAt])
}
